

В отличие от аннотаций, мета-аннотации в Java могут быть только стандартные — собственные создавать нельзя.

@Retention, @Target, @Inherited и @Repeatable

@Retention
Аннотации в Java могут быть доступны на разных этапах жизненного цикла
 программы. Это позволяет обрабатывать их только на том этапе, на котором это
 действительно нужно, и не учитывать на последующих.
Сообщить, вплоть до какого этапа нужна аннотация, можно с помощью мета-аннотации
 @Retention (англ. «сохранение», «удержание»). Ей необходимо указать
 одно из трёх значений перечисления java.lang.annotation.RetentionPolicy:

*RetentionPolicy.SOURCE (от англ. source — «исходный код»).
    Аннотация будет доступна только в исходном коде и не
    будет сохранена в скомпилированном байт-коде. Следовательно,
    она не будет доступна во время выполнения программы.

RetentionPolicy.CLASS (от англ. class — «класс»). Аннотация будет
    сохранена в скомпилированном байт-коде, но не будет доступна
    во время выполнения. Это означает, что аннотация будет присутствовать
    в файле .class, но не будет использоваться в процессе выполнения программы.

RetentionPolicy.RUNTIME (от англ. runtime — «время выполнения»). Аннотация будет
    сохранена в скомпилированном байт-коде и будет доступна во время выполнения
    программы. Это наиболее часто используемая настройка.

---

@Target
Мета-аннотация @Target (англ. «цель») определяет, к каким элементам
    программы можно применять аннотацию. Например, к классам, методам,
    полям и так далее.
Элемент ElementType (англ. «тип элемента [кода]») в мета-аннотации @Target
    определяет контекст, в котором аннотация может быть использована.
     Этот элемент принимает одно из значений перечисления
     java.lang.annotation.ElementType. Назовём некоторые из значений и укажем,
     что они значат для аннотации, которая помечена @Target:

    ANNOTATION_TYPE — применяется к аннотациям;
    CONSTRUCTOR — применяется к конструкторам;
    FIELD — применяется к полям классов и перечислений;
    LOCAL_VARIABLE — применяется к локальным переменным;
    METHOD — применяется к методам;
    PACKAGE — применяется к пакетам;
    PARAMETER — применяется к параметрам метода;
    TYPE — применяется к типам (классам, интерфейсам, перечислениям).


---

@Inherited
Мета-аннотация @Inherited (англ. «наследуемый») применяется только
    к аннотациям, которыми помечают классы. Она указывает, что эта
    аннотация будет применена ко всей иерархии классов. Допустим,
    мы пометили аннотацию @MyBestAnnotation мета-аннотацией @Inherited.
    Тогда, если мы применим @MyBestAnnotation к какому-либо базовому классу,
    все его подклассы будут автоматически отмечены ею.

----

@Repeatable
Мета-аннотация @Repeatable (англ. «повторяемый») позволяет использовать
    одну и ту же аннотацию несколько раз для одного элемента кода. Это удобно,
     если нужно применить несколько однотипных аннотаций. Для обеспечения
     обратной совместимости повторяющиеся аннотации хранятся в контейнере
     аннотаций, который автоматически генерируется компилятором Java.
Допустим, нам нужно использовать аннотацию @Role несколько раз для класса
    UserRoles. Для генерации контейнера аннотаций нам понадобятся следующие
    описания: